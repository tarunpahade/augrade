interface MemoryOptions {
    user_id?: string;
    agent_id?: string;
    app_id?: string;
    metadata?: Record<string, any>;
    filters?: Record<string, any>;
    org_name?: string | null;
    project_name?: string | null;
    org_id?: string | number | null;
    project_id?: string | number | null;
    infer?: boolean;
    page?: number;
    page_size?: number;
}
declare enum API_VERSION {
    V1 = "v1",
    V2 = "v2"
}
interface Messages {
    role: string;
    content: string;
}
interface MemoryHistory {
    id: string;
    memory_id: string;
    input: Array<Messages>;
    old_memory: string | null;
    new_memory: string | null;
    user_id: string;
    categories: Array<string>;
    event: Event | string;
    created_at: Date;
    updated_at: Date;
}
interface SearchOptions extends MemoryOptions {
    api_version?: API_VERSION | string;
    limit?: number;
}
declare enum Event {
    ADD = "ADD",
    UPDATE = "UPDATE",
    DELETE = "DELETE",
    NOOP = "NOOP"
}
interface MemoryData {
    memory: string;
}
interface Memory {
    id: string;
    messages?: Array<Messages>;
    event?: Event | string;
    data?: MemoryData | null;
    memory?: string;
    user_id?: string;
    hash?: string;
    categories?: Array<string>;
    created_at?: Date;
    updated_at?: Date;
    memory_type?: string;
    score?: number;
    metadata?: any | null;
}
interface MemoryUpdateBody {
    memoryId: string;
    text: string;
}
interface User {
    id: string;
    name: string;
    created_at: Date;
    updated_at: Date;
    total_memories: number;
    owner: string;
    type: string;
}
interface AllUsers {
    count: number;
    results: Array<User>;
    next: any;
    previous: any;
}

interface ClientOptions {
    apiKey: string;
    host?: string;
    organizationName?: string;
    projectName?: string;
    organizationId?: string;
    projectId?: string;
}
declare class MemoryClient {
    apiKey: string;
    host: string;
    organizationName: string | null;
    projectName: string | null;
    organizationId: string | number | null;
    projectId: string | number | null;
    headers: Record<string, string>;
    client: any;
    telemetryId: string;
    _validateApiKey(): any;
    constructor(options: ClientOptions);
    wrapMethod(methodName: any, method: any): (...args: any) => Promise<any>;
    _fetchWithErrorHandling(url: string, options: any): Promise<any>;
    _preparePayload(messages: string | Array<{
        role: string;
        content: string;
    }>, options: MemoryOptions): object;
    _prepareParams(options: MemoryOptions): object;
    add(messages: string | Array<{
        role: string;
        content: string;
    }>, options?: MemoryOptions): Promise<Array<Memory>>;
    get(memoryId: string): Promise<Memory>;
    getAll(options?: SearchOptions): Promise<Array<Memory>>;
    search(query: string, options?: SearchOptions): Promise<Array<Memory>>;
    delete(memoryId: string): Promise<{
        message: string;
    }>;
    deleteAll(options?: MemoryOptions): Promise<{
        message: string;
    }>;
    history(memoryId: string): Promise<Array<MemoryHistory>>;
    users(): Promise<AllUsers>;
    deleteUser(entityId: string, entity?: {
        type: string;
    }): Promise<{
        message: string;
    }>;
    deleteUsers(): Promise<{
        message: string;
    }>;
    batchUpdate(memories: Array<MemoryUpdateBody>): Promise<string>;
    batchDelete(memories: Array<string>): Promise<string>;
}

export { API_VERSION, type AllUsers, type Memory, MemoryClient, type MemoryData, type MemoryHistory, type MemoryOptions, type MemoryUpdateBody, type Messages, type SearchOptions, type User, MemoryClient as default };
export = MemoryClient